apply plugin: 'jacoco'

jacoco {
    toolVersion "0.7.1.201405082137"
}bin

afterEvaluate { project ->
    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type -> type.name }
    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }

    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')

    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName = "${buildTypeName}"
            if (productFlavorName) {
                sourceName = "${productFlavorName}${sourceName.capitalize()}"
            }
            def targetName = "${sourceName.capitalize()}"
            def testTaskName = "test${sourceName.capitalize()}UnitTest"
            def coverageTaskName = "${testTaskName}Coverage"

            // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
            task "$coverageTaskName" (type:JacocoReport, dependsOn: "$testTaskName") {
                group = "Reporting"
                description = "Generate Jacoco coverage reports on the ${targetName} build."

                classDirectories = fileTree(
                        dir: "${project.buildDir}/intermediates/classes/${sourceName}",
                        excludes: ['**/R.class',
                                   '**/R$*.class',
                                   '**/*$ViewInjector*.*',
                                   '**/BuildConfig.*',
                                   '**/Manifest*.*']
                )

                def coverageSourceDirs = [
                        "src/main/java",
                        "src/$productFlavorName/java",
                        "src/$buildTypeName/java"
                ]
                additionalSourceDirs = files(coverageSourceDirs)
                sourceDirectories = files(coverageSourceDirs)
                executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")

                reports {
                    xml.enabled = true
                    html.enabled = true
                }
            }
        }
    }
}

//apply from: '../jacoco.gradle'
//
//// jacoco start
//apply plugin: 'jacoco'
//
//jacoco {
//    toolVersion "0.7.1.201405082137"
//
////    reportsDir = file("$buildDir/customJacocoReportDir")
//}
//
//task jacocoTestReport(type: JacocoReport, dependsOn: "connectedDebugAndroidTest") {
//    group = "Reporting"
//    description = "Generate Jacoco coverage reports"
//
//    classDirectories = fileTree(
//            dir: "${buildDir}/intermediates/classes/debug",
//            excludes: ['**/R.class',
//                       '**/R$*.class',
//                       '**/BuildConfig.*']
//    )
//
//    sourceDirectories = files("${buildDir.parent}/src/main/java")
//    additionalSourceDirs = files([
//            "${buildDir}/generated/source/buildConfig/debug",
//            "${buildDir}/generated/source/r/debug"
//    ])
//    executionData = files("${buildDir}/jacoco/connectedDebugAndroidTest.exec")
//
//    reports {
//        xml.enabled = true
//        html.enabled = true
//        xml {
//            destination "${buildDir}/reports/jacoco/${project.name}/jacocoTestReport.xml"
//        }
//        html {
//            destination "${buildDir}/reports/jacoco/${project.name}"
//        }
//    }
//}
// jacoco end