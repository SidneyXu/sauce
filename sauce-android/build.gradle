import com.android.builder.core.BuilderConstants

apply plugin: 'com.android.library'
apply plugin: 'com.github.kt3k.coveralls'

ext.localReleaseDest = "${buildDir}/release/${VERSION_NAME}"
version = VERSION_NAME

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.4.0x'
    }
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName VERSION_NAME
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }

    lintOptions {
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
    packagingOptions {
        exclude 'NOTICE'
        exclude 'asm-license.txt'
        exclude 'mockito-extensions/org.mockito.plugins.MockMaker'
    }
}

dependencies {
    compile "com.android.support:appcompat-v7:${rootProject.ext.appcompatVersion}"
    androidTestCompile 'com.squareup.assertj:assertj-android:1.1.0'
    compile project(":sauce-core")
    //test
    provided 'com.github.bumptech.glide:glide:3.6.1'
    //    provided 'com.android.support:support-v4:19.1.0'
}

android.libraryVariants.all { variant ->
    def javadoc = task("generate${variant.name}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompile.source
        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)

        options.addStringOption('Xdoclint:none', '-quiet')
        options.linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference")

        //  Android
        exclude "**/R.java"
        exclude "**/BuildConfig.java"
    }

    def javadocJar = task("javadoc${variant.name}", type: Jar) {
        classifier = "javadoc"
        description "Bundles Javadoc into a JAR file for $variant.name."
        from tasks["generate${variant.name}Javadoc"]
    }

    def jar = task("jar${variant.name}", type: Jar) {
        description "Bundles compiled .class files into a JAR file for $variant.name."
        dependsOn variant.javaCompile
        from variant.javaCompile.destinationDir

        manifest {
            attributes(
                    "Bundle-Name": POM_NAME,
                    "Bundle-Version": VERSION_NAME
            )
        }

        exclude '**/R.class', '**/R$*.class', '**/R.html'
        exclude '**/BuildConfig.class'
    }

    if (name.equals(BuilderConstants.RELEASE)) {
        artifacts.add('archives', jar);
        artifacts.add('archives', javadocJar);
    }
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

artifacts {
    archives androidSourcesJar
}

//apply from: '../mvn_publish.gradle'
//apply from: '../dev_publish.gradle'
//apply from: '../local_publish.gradle'

//region Coveralls

coveralls.jacocoReportPath = "${buildDir}/reports/coverage/debug/report.xml"

//endregion

//apply from: "${profile}-profile.gradle"
//gradle -Pprofile=dev tasks

//def env = hasProperty("env") ?: "dev"
//apply from:

